from datetime import datetime

class Cliente:
    def __init__(self, nome, cpf, data_nascimento):
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento

class ContaCorrente:
    def __init__(self, cliente, numero_conta, saldo_inicial=0):
        self.cliente = cliente
        self.numero_conta = numero_conta
        self.saldo = saldo_inicial
        self.transacoes = []

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.transacoes.append((datetime.now(), 'Depósito', valor))
            print(f'Depósito de R${valor:.2f} realizado com sucesso.')
        else:
            print('Valor de depósito deve ser positivo.')

    def sacar(self, valor):
        if 0 < valor <= self.saldo:
            self.saldo -= valor
            self.transacoes.append((datetime.now(), 'Saque', -valor))
            print(f'Saque de R${valor:.2f} realizado com sucesso.')
        else:
            print('Saldo insuficiente ou valor de saque inválido.')

    def extrato(self):
        print(f'Extrato da conta {self.numero_conta} do cliente {self.cliente.nome}:')
        for transacao in self.transacoes:
            data, tipo, valor = transacao
            print(f'{data} - {tipo}: R${valor:.2f}')
        print(f'Saldo atual: R${self.saldo:.2f}')

# Função para criar um novo cliente
def criar_cliente(nome, cpf, data_nascimento):
    return Cliente(nome, cpf, data_nascimento)

# Função para criar uma nova conta corrente e vinculá-la a um cliente
def criar_conta_corrente(cliente, numero_conta, saldo_inicial=0):
    return ContaCorrente(cliente, numero_conta, saldo_inicial)

# Exemplo de uso

# Criando um cliente
cliente1 = criar_cliente("João Silva", "123.456.789-00", "01/01/1990")

# Criando uma conta corrente para o cliente
conta1 = criar_conta_corrente(cliente1, "0001", 1000)

# Realizando operações na conta
conta1.depositar(500)
conta1.sacar(200)
conta1.extrato()
